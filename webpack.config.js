const path              = require('path'),
      SRC               = path.join(__dirname, 'src/'),
      NODE_MODULES      = path.join(__dirname, 'node_modules/'),
      webpack           = require('webpack'),
      ExtractTextPlugin = require('extract-text-webpack-plugin'),
      HTMLWebpackPlugin = require('html-webpack-plugin'),
      StyleLintPlugin   = require('stylelint-webpack-plugin'),
      SpritePlugin      = require('svg-sprite-loader/plugin'),
      BrowserSync       = require('browser-sync-webpack-plugin');

const config = {
  entry: './src/app.js',
  output: {
    path: path.join(__dirname, '/'),
    filename: 'app.js'
  },
  devtool: 'cheap-eval-source-map',
  resolve: {
    modules: [
      SRC,
      NODE_MODULES,
      path.join(SRC, 'assets/scripts'),
      path.join(SRC, 'assets/sass'),
      path.join(SRC, 'assets/images'),
      path.join(SRC, 'assets/icons')
    ]
  },
  module: {
    rules: [
      {
        test: /\.s?css$/,
        use: ExtractTextPlugin.extract({
          fallback: 'style-loader',
          use: [
            {
              loader: 'css-loader',
              options: {
                sourceMap: true
              }
            },
            {
              loader: 'postcss-loader',
              options: {
                ident: 'postcss',
                plugins: [
                  require('autoprefixer')({ browsers: 'last 2 versions' }),
                  require('css-mqpacker')({ sort: true }),
                  require('cssnano')()
                ],
                sourceMap: true
              }
            },
            {
              loader: 'sass-loader',
              options: {
                includePaths: [
                  'node_modules/bourbon/core',
                  'node_modules/bourbon-neat/core',
                  '../',
                  'node_modules/sanitize.scss'
                ],
                sourceMap: true
              }
            }
          ]
        })
      },
      {
        test: /\.svg$/,
        loader: 'svg-sprite-loader',
        options: {
          extract: true,
          spriteFilename: 'svg-defs.svg'
        }
      },
      {
        test: /\.(jpe?g|png|gif)$/,
        use: [
          {
            loader: 'file-loader',
            options: {
              outputPath: 'images/',
              name: '[name].[ext]'
            }
          },
          'img-loader'
        ]
      },
      {
        test: /\.html$/,
        loader: 'html-loader'
      },
      {
        enforce: 'pre',
        test: /\.js$/,
        exclude: [
          /node_modules/
        ],
        loader: 'eslint-loader'
      },
      {
        test: /\.js$/,
        exclude: [
          /node_modules/
        ],
        loader: 'babel-loader'
      }
    ]
  },
  devServer: {
    contentBase: path.join(__dirname, 'dist'),
    compress: true,
    port: 9000
  },
  plugins: [
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify('process.env.NODE_ENV' || 'development')
    }),
    new webpack.BannerPlugin({
      banner: 'This file is autogenerated with Webpack. DO NOT EDIT DIRECTLY.',
      exclude: /\.svg$/
    }),
    new StyleLintPlugin(),
    new ExtractTextPlugin('app.css'),
    new SpritePlugin(),
    new BrowserSync({
      host: 'localhost',
      port: '3000',
      proxy: 'http://carrieforde.local'
    })
  ]
};

// switch (process.env.NODE_ENV) {

//   case 'production':
//     config.plugins.push(new webpack.optimize.UglifyJsPlugin());
//     break;

//   default:
//     config.devtool = 'source-map';
//     break;
// }

module.exports = config;
